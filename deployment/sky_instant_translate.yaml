AWSTemplateFormatVersion: '2010-09-09'

Mappings:
    SourceCode:
        General:
            S3Bucket: '%%BUCKET_NAME%%'
            KeyPrefix: "media-analysis-solution/%%VERSION%%/code"

Parameters:
  startMediaConvertCode:
    Type: "String"
    Description: "S3 Key of the start mediaconvert code"
    Default: "start_media_convert.zip"
  checkMediaConvertCode:
    Type: "String"
    Description: "S3 Key of the check mediaconvert code"
    Default: "get_media_convert.zip"

  startTranscribeCode:
    Type: "String"
    Description: "S3 Key of the start transcribe code"
    Default: "start_transcribe.zip"
  checkTranscribeCode:
    Type: "String"
    Default: "get_transcribe.zip"
    Description: "S3 Key of the check transcribe code"

  startTranslateCode:
    Type: "String"
    Description: "S3 Key of the start translate code"
    Default: "start_translate.zip"

  startPollyCode:
    Type: "String"
    Description: "S3 Key of the start polly code"
    Default: "start_polly.zip"
  checkPollyCode:
    Type: "String"
    Description: "S3 Key of the check polly code"
    Default: "get_polly.zip"

  DataPlaneUrl:
    Type: "String"
    Description: "Base endpoint url of the dataplane"
  DataPlaneBucket:
    Type: "String"
    Description: "Bucket for the dataplane"
  DataPlanePath:
    Type: "String"
    Description: "Prefix for the dataplane s3 bucket"


Resources:
# S3 Buckets
  skyDataStore:
    Type: "AWS::S3::Bucket"

# IAM Roles:

  mediaConvertRole:
    Type: "AWS::IAM::Role"
    Properties:
       AssumeRolePolicyDocument:
         Version: "2012-10-17"
         Statement:
           -
             Effect: "Allow"
             Principal:
               Service:
                 - "mediaconvert.amazonaws.com"
             Action:
               - "sts:AssumeRole"
       Policies:
         -
           PolicyName: "skyMediaconvertAllowS3"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               - Action:
                   - "s3:GetObject"
                   - "s3:PutObject"
                 Resource: !Sub 'arn:aws:s3:::${skyDataStore}/*'
                 Effect: "Allow"
               - Action:
                   - "s3:GetObject"
                   - "s3:PutObject"
                 Resource: !Sub 'arn:aws:s3:::${DataPlaneBucket}/*'
                 Effect: "Allow"
  preprocessRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "skyMediaConvertAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "mediaconvert:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${skyDataStore}/*'
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: "Allow"
              - Action:
                  - "iam:PassRole"
                Resource: !GetAtt "mediaConvertRole.Arn"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${DataPlaneBucket}/*'
                Effect: "Allow"

  transcribeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "skyTranscribeAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "transcribe:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${skyDataStore}/*'
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${DataPlaneBucket}/*'
                Effect: "Allow"

  translateRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "skyTranslateAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "translate:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${skyDataStore}/*'
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${DataPlaneBucket}/*'
                Effect: "Allow"

  pollyRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "skyPollyAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "polly:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${skyDataStore}/*'
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub 'arn:aws:s3:::${DataPlaneBucket}/*'
                Effect: "Allow"

  stepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Policies:
        -
          PolicyName: "skySFNLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"

# Lambda Functions:

  # Preprocess Lambdas

  skyStartMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "start_media_convert.lambda_handler"
      Role: !GetAtt "preprocessRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "startMediaConvertCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertRole.Arn"
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  skyCheckMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "get_media_convert.lambda_handler"
      Role: !GetAtt "preprocessRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "checkMediaConvertCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  # Transcribe Lambdas

  skyStartTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "start_transcribe.lambda_handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "startTranscribeCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  skyCheckTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "get_transcribe.lambda_handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "checkTranscribeCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  # Translate Lambdas

  skyTranslateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "start_translate.lambda_handler"
      Role: !GetAtt "translateRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "startTranslateCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  # Polly Lambdas

  skyStartPollyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "start_polly.lambda_handler"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "startPollyCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

  skyCheckPollyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "get_polly.lambda_handler"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !Ref "checkPollyCode"]]
      Runtime: "python3.7"
      Environment:
        Variables:
          dataplane_base_url: !Ref "DataPlaneUrl"
          dataplane_bucket: !Ref "DataPlaneBucket"
          base_s3_key: !Ref "DataPlanePath"

# Step Functions

  preprocessStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyPreprocessStateMachine"
      DefinitionString: !Sub |-
        {
        	"StartAt": "Is mediaconvert Enabled?",
        	"States": {
        		"Is mediaconvert Enabled?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.mediaconvert.enabled",
                        "BooleanEquals": true,
        				"Next": "Is mediaconvert Media Type?"
        			}],
        			"Default": "mediaconvert Not Started"
        		},
        		"Is mediaconvert Media Type?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.mediaconvert.mediaType",
        				"StringEquals": "video",
        				"Next": "Execute mediaconvert"
        			}],
        			"Default": "mediaconvert Not Started"
        		},
        		"mediaconvert Not Started": {
        			"Type": "Succeed"
        		},
        		"Execute mediaconvert": {
        			"Type": "Task",
        			"Resource": "${skyStartMediaConvertFunction.Arn}",
        			"ResultPath": "$.outputs",
                    "OutputPath": "$.outputs",
        			"Next": "mediaconvert Wait",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "mediaconvert Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"mediaconvert Wait": {
        			"Type": "Wait",
        			"Seconds": 10,
        			"Next": "Get mediaconvert Status"
        		},
        		"Get mediaconvert Status": {
        			"Type": "Task",
        			"Resource": "${skyCheckMediaConvertFunction.Arn}",
        			"Next": "Did mediaconvert Complete",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "mediaconvert Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"Did mediaconvert Complete": {
        			"Type": "Choice",
        			"Choices": [{
        					"Variable": "$.status",
        					"StringEquals": "Executing",
        					"Next": "mediaconvert Wait"
        				},
        				{
        					"Variable": "$.status",
        					"StringEquals": "Complete",
        					"Next": "mediaconvert Succeeded"
        				}
        			],
        			"Default": "mediaconvert Failed"
        		},
        		"mediaconvert Failed": {
        			"Type": "Fail"
        		},
        		"mediaconvert Succeeded": {
        			"Type": "Succeed"
        		}
        	}
        }
      RoleArn: !GetAtt "stepFunctionRole.Arn"

  transcribeStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyTranscribeStateMachine"
      DefinitionString: !Sub |-
        {
        	"StartAt": "Is transcribe Enabled?",
        	"States": {
        		"Is transcribe Enabled?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.transcribe.enabled",
                        "BooleanEquals": true,
        				"Next": "Is transcribe Media Type?"
        			}],
        			"Default": "transcribe Not Started"
        		},
        		"Is transcribe Media Type?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.transcribe.mediaType",
        				"StringEquals": "audio",
        				"Next": "Execute transcribe"
        			}],
        			"Default": "transcribe Not Started"
        		},
        		"transcribe Not Started": {
        			"Type": "Succeed"
        		},
        		"Execute transcribe": {
        			"Type": "Task",
        			"Resource": "${skyStartTranscribeFunction.Arn}",
        			"ResultPath": "$.outputs",
                    "OutputPath": "$.outputs",
        			"Next": "transcribe Wait",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "transcribe Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"transcribe Wait": {
        			"Type": "Wait",
        			"Seconds": 10,
        			"Next": "Get transcribe Status"
        		},
        		"Get transcribe Status": {
        			"Type": "Task",
        			"Resource": "${skyCheckTranscribeFunction.Arn}",
        			"Next": "Did transcribe Complete",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "transcribe Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"Did transcribe Complete": {
        			"Type": "Choice",
        			"Choices": [{
        					"Variable": "$.status",
        					"StringEquals": "Executing",
        					"Next": "transcribe Wait"
        				},
        				{
        					"Variable": "$.status",
        					"StringEquals": "Complete",
        					"Next": "transcribe Succeeded"
        				}
        			],
        			"Default": "transcribe Failed"
        		},
        		"transcribe Failed": {
        			"Type": "Fail"
        		},
        		"transcribe Succeeded": {
        			"Type": "Succeed"
        		}
        	}
        }
      RoleArn: !GetAtt "stepFunctionRole.Arn"

  translateStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyTranslateStateMachine"
      DefinitionString: !Sub |-
        {
        	"StartAt": "Is translate Enabled?",
        	"States": {
        		"Is translate Enabled?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.translate.enabled",
                        "BooleanEquals": true,
        				"Next": "Is translate Media Type?"
        			}],
        			"Default": "translate Not Started"
        		},
        		"Is translate Media Type?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.translate.mediaType",
        				"StringEquals": "text",
        				"Next": "Execute translate"
        			}],
        			"Default": "translate Not Started"
        		},
        		"translate Not Started": {
        			"Type": "Succeed"
        		},
        		"Execute translate": {
        			"Type": "Task",
        			"Resource": "${skyTranslateFunction.Arn}",
        			"ResultPath": "$.outputs",
                    "OutputPath": "$.outputs",
        			"Next": "Did translate Complete",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "translate Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"Did translate Complete": {
        			"Type": "Choice",
        			"Choices": [
        				{
        					"Variable": "$.status",
        					"StringEquals": "Complete",
        					"Next": "translate Succeeded"
        				}
        			],
        			"Default": "translate Failed"
        		},
        		"translate Failed": {
        			"Type": "Fail"
        		},
        		"translate Succeeded": {
        			"Type": "Succeed"
        		}
        	}
        }
      RoleArn: !GetAtt "stepFunctionRole.Arn"

  pollyStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyPollyStateMachine"
      DefinitionString: !Sub |-
        {
        	"StartAt": "Is polly Enabled?",
        	"States": {
        		"Is polly Enabled?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.polly.enabled",
                        "BooleanEquals": true,
        				"Next": "Is polly Media Type?"
        			}],
        			"Default": "polly Not Started"
        		},
        		"Is polly Media Type?": {
        			"Type": "Choice",
        			"Choices": [{
        				"Variable": "$.configuration.polly.mediaType",
        				"StringEquals": "text",
        				"Next": "Execute polly"
        			}],
        			"Default": "polly Not Started"
        		},
        		"polly Not Started": {
        			"Type": "Succeed"
        		},
        		"Execute polly": {
        			"Type": "Task",
        			"Resource": "${skyStartPollyFunction.Arn}",
        			"ResultPath": "$.outputs",
                    "OutputPath": "$.outputs",
        			"Next": "polly Wait",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "polly Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"polly Wait": {
        			"Type": "Wait",
        			"Seconds": 10,
        			"Next": "Get polly Status"
        		},
        		"Get polly Status": {
        			"Type": "Task",
        			"Resource": "${skyCheckPollyFunction.Arn}",
        			"Next": "Did polly Complete",
        			"Retry": [ {
           				"ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException", "Lambda.Unknown", "MasExecutionError"],
                        "IntervalSeconds": 2,
        				"MaxAttempts": 2,
        				"BackoffRate": 2
        			}
        			],
        			"Catch": [
                    {
                       "ErrorEquals": ["States.ALL"],
                       "Next": "polly Failed",
                       "ResultPath": "$.outputs"
                    }
        			]
        		},
        		"Did polly Complete": {
        			"Type": "Choice",
        			"Choices": [{
        					"Variable": "$.status",
        					"StringEquals": "Executing",
        					"Next": "polly Wait"
        				},
        				{
        					"Variable": "$.status",
        					"StringEquals": "Complete",
        					"Next": "polly Succeeded"
        				}
        			],
        			"Default": "polly Failed"
        		},
        		"polly Failed": {
        			"Type": "Fail"
        		},
        		"polly Succeeded": {
        			"Type": "Succeed"
        		}
        	}
        }
      RoleArn: !GetAtt "stepFunctionRole.Arn"