{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "APIHandlerArn": {
      "Value": {
        "Fn::GetAtt": [
          "APIHandler",
          "Arn"
        ]
      }
    },
    "APIHandlerName": {
      "Value": {
        "Ref": "APIHandler"
      }
    },
    "CompleteStageExecutionLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "CompleteStageExecutionLambda",
          "Arn"
        ]
      }
    },
    "CreateWorkflowExecutionS3Arn": {
      "Value": {
        "Fn::GetAtt": [
          "CreateWorkflowExecutionS3",
          "Arn"
        ]
      }
    },
    "EndpointURL": {
      "Value": {
        "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/"
      }
    },
    "GetStageForExecutionLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "GetStageForExecutionLambda",
          "Arn"
        ]
      }
    },
    "RestAPIId": {
      "Value": {
        "Ref": "RestAPI"
      }
    },
    "StartStageExecutionLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "StartStageExecutionLambda",
          "Arn"
        ]
      }
    },
    "TestExecuteStageLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "TestExecuteStageLambda",
          "Arn"
        ]
      }
    }
  },
  "Parameters": {
    "StageExecutionQueueUrl": {
      "Description": "Queue used to post stage executions for processing",
      "Type": "String"
    },
    "StageTableName": {
      "Description": "Table used to store stage definitions",
      "Type": "String"
    },
    "WorkflowExecutionTableName": {
      "Description": "Table used to monitor Workflow executions",
      "Type": "String"
    },
    "WorkflowTableName": {
      "Description": "Table used to store workflow defintitions",
      "Type": "String"
    }
  },
  "Resources": {
    "APIHandlerInvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "APIHandler"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
            {
              "RestAPIId": {
                "Ref": "RestAPI"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ApiHandlerRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ApiHandlerRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "CompleteStageExecutionLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "CompleteStageExecutionLambdaRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "CreateWorkflowExecutionS3Role": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "CreateWorkflowExecutionS3RolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "GetStageForExecutionLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "GetStageForExecutionLambdaRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "StartStageExecutionLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "StartStageExecutionLambdaRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "TestExecuteStageLambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::526662735483:role/mascode-MediaAnalysisFunctionRole-6YDC4OXE1XH3",
                    "arn:aws:iam::526662735483:role/mas-workflow-StageExecutionRole-3TQLNRNTLAKW"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "TestExecuteStageLambdaRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "APIHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.app",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "CompleteStageExecutionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.complete_stage_execution_lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CompleteStageExecutionLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "CreateWorkflowExecutionS3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.create_workflow_execution_s3",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CreateWorkflowExecutionS3Role",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "GetStageForExecutionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.get_stage_for_execution_lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "GetStageForExecutionLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "StartStageExecutionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.start_stage_execution_lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "StartStageExecutionLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "TestExecuteStageLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "elementalrodeo99-us-east-1",
          "S3Key": "media-analysis-solution/v2.0.4/8e03ec123ac41be6b3beeae7aca6bb34"
        },
        "Handler": "app.test_execute_stage_lambda",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "TestExecuteStageLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.7.0:stage=dev:app=workflow-api"
          }
        ]
      }
    },
    "RestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "definitions": {
            "Empty": {
              "title": "Empty Schema",
              "type": "object"
            }
          },
          "info": {
            "title": "workflow-api",
            "version": "1.0"
          },
          "paths": {
            "/": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/execution": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/execution/nextstage": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/stage": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/{workflowId}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "parameters": [
                  {
                    "in": "path",
                    "name": "workflowId",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            }
          },
          "schemes": [
            "https"
          ],
          "swagger": "2.0",
          "x-amazon-apigateway-binary-media-types": [
            "application/octet-stream",
            "application/x-tar",
            "application/zip",
            "audio/basic",
            "audio/ogg",
            "audio/mp4",
            "audio/mpeg",
            "audio/wav",
            "audio/webm",
            "image/png",
            "image/jpg",
            "image/jpeg",
            "image/gif",
            "video/ogg",
            "video/mpeg",
            "video/webm"
          ]
        }
      }
    },
    "RestAPIDeployment1468f327d5": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "RestApi deployment id: 1468f327d5c7168b4cb8758266326e8ac737b27b",
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "Stage"
      }
    },
    "RestAPIapiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "RestAPIDeployment1468f327d5"
        },
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "api"
      }
    }
  }
}