AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0042-workflow) Media Analysis Solution - The AWS CloudFormation template that provisions the Media Analysis Solution workflow management resources using Amazon Elasticsearch.

Mappings:
    SourceCode:
        General:
            S3Bucket: '%%BUCKET_NAME%%'
            CodeKeyPrefix: "media-analysis-solution/%%VERSION%%/code"
            TemplateKeyPrefix: "media-analysis-solution/%%VERSION%%/cf"

Resources:
  # IAM Roles
  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com" ]]
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-stepfunctions-service-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

  StageExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-stage-execution-lambda-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:", Ref: "AWS::StackName","-*"]]
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "WorkflowTable"]]
                  - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "WorkflowExecutionTable"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              - Effect: Allow
                Action: 
                  - sqs:DeleteMessage
                  - sqs:ListQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - "Fn::GetAtt":
                    - StageExecutionQueue
                    - Arn

  # Services - Dynamodb
  WorkflowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "Workflow"]]
  
  StageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "Stage"]]

  OperationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "Operation"]]

  WorkflowExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "WorkflowExecution"]]

    
  # Services - SQS
  
  StageExecutionDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "StageExecutionDLQ"
        MessageRetentionPeriod: 7200 # 2 hours in seconds

  StageExecutionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: StageExecution
      VisibilityTimeout: 43200 #Maximum, 12 hours in seconds.  Stages are long running
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - StageExecutionDeadLetterQueue
            - Arn
        maxReceiveCount: 1 # Don't retry if stage times out

  # Services - Lambda

  CompleteStageLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-complete-workflow"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
      Handler: app.complete_stage_execution_lambda
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "CodeKeyPrefix"],  "workflow.zip"]]
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - StageExecutionRole
        - Arn
      Runtime: python3.6
      Timeout: 900
    Type: AWS::Lambda::Function           

  # Workflow creation and execution API

  MediaAnalysisWorkflowApiStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !FindInMap ["SourceCode", "General", "S3Bucket"] , !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"], "media-analysis-workflow-api-stack.template"]]
            Parameters:
                StageExecutionQueueUrl: !Ref StageExecutionQueue
                StageExecutionRole: !Ref StageExecutionRole
                OperationTableName: !Ref OperationTable
                StageTableName: !Ref StageTable
                WorkflowExecutionTableName: !Ref WorkflowExecutionTable
                WorkflowTableName: !Ref WorkflowTable
                CompleteStageLambdaArn: 
                    Fn::GetAtt:
                    - CompleteStageLambda
                    - Arn 


    
# Outputs:
#   Message:
#     Description: The message from the custom resource.
#     Value: !GetAtt 'CustomResource.Message'


Outputs:
  WorkflowTable:
    Description: Workflow definition table
    Value: !Ref WorkflowTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WorkflowTable ] ]
  StageTable:
    Description: Stage definition table
    Value: !Ref StageTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", StageTable ] ]
  OperationTable:
    Description: Stage definition table
    Value: !Ref StageTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", OperationTable ] ]
  WorkflowExecutionTable:
    Description: Workflow execution table
    Value: !Ref WorkflowExecutionTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WorkflowExecutionTable ] ]
  StageExecutionQueue:
    Description: Work queue for stage execution
    Value: !Ref StageExecutionQueue
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", StageExecutionQueue ] ]
  WorkflowCustomResourceArn:
    Description: Custom resource for creating operations, stages and workflows using CloudFormation
    Value: !GetAtt MediaAnalysisWorkflowApiStack.Outputs.WorkflowCustomResourceArn
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WorkflowCustomResourceArn ] ]

  
