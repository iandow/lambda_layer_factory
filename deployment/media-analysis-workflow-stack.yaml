AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0042-workflow) Media Analysis Solution - The AWS CloudFormation template that provisions the Media Analysis Solution workflow management resources using Amazon Elasticsearch.

Parameters:
  MediaAnalysisPreprocessFunction:
      Type: String
      Description: "ARN of the Media Analysis Preprocess Lambda function"
  MediaAnalysisPreprocessStateMachineRole:
      Type: String
      Description: "Name of the Media Analysis state machine role"

Mappings:
    SourceCode:
        General:
            S3Bucket: '%%BUCKET_NAME%%'
            KeyPrefix: "media-analysis-solution/%%VERSION%%"

Resources:
  # IAM Roles
  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com" ]]
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-stepfunctions-service-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

  StageExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-stage-execution-lambda-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:", Ref: "AWS::StackName","-*"]]
              -
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource:
                  - !Join ["", ["arn:aws:dynamodb:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":table/",Ref: "WorkflowTable"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]

  # Services - Dynamodb
  WorkflowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "Workflow"]]
  
  StageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "Stage"]]

  WorkflowExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: !Join ["", [Ref: "AWS::StackName", "WorkflowExecution"]]

    
  # Services - SQS
  
  StageExecutionDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "StageExecutionDLQ"
        MessageRetentionPeriod: 7200 # 2 hours in seconds

  StageExecutionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: StageExecution
      VisibilityTimeout: 43200 #Maximum, 12 hours in seconds.  Stages are long running
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - StageExecutionDeadLetterQueue
            - Arn
        maxReceiveCount: 1 # Don't retry if stage times out
  
  MediaAnalysisWorkflowApiStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            TemplateURL: !Join ["/", ["https://s3.amazonaws.com", !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]] , !FindInMap ["SourceCode", "General", "KeyPrefix"], "media-analysis-workflow-api-stack.template"]]
            Parameters:
                StageExecutionQueueUrl: !Ref StageExecutionQueue
                StageTableName: !Ref StageTable
                WorkflowExecutionTableName: !Ref WorkflowExecutionTable
                WorkflowTableName: !Ref WorkflowTable
      


Outputs:
  WorkflowTable:
    Description: Workflow definition table
    Value: !Ref WorkflowTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WorkflowTable ] ]
  StageTable:
    Description: Stage definition table
    Value: !Ref StageTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", StageTable ] ]
  WorkflowExecutionTable:
    Description: Workflow execution table
    Value: !Ref WorkflowExecutionTable
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", WorkflowExecutionTable ] ]
  StageExecutionQueue:
    Description: Work queue for stage execution
    Value: !Ref StageExecutionQueue
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", StageExecutionQueue ] ]