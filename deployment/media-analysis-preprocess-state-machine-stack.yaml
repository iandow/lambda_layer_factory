AWSTemplateFormatVersion: "2010-09-09"
Description: (SO0042-statemachine) Media Analysis Solution - The AWS CloudFormation template that provisions the Media Analysis Solution state machine using Amazon Step Functions.

Parameters:
  MediaAnalysisPreprocessFunction:
      Type: String
      Description: "ARN of the Media Analysis Lambda function"
  StateMachineName:
      Type: String
      Description: "Name of the Media Analysis state machine"

Resources:
  MediaAnalysisPreprocessStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
          StateMachineName: !Ref StateMachineName
          DefinitionString:
            !Sub
              - |-
                {
                  "StartAt": "Stage Name",
                  "States": {
                    "Stage Name": {
                      "Type": "Pass",
                      "Result": {
                        "stage": "preprocess"
                      },
                      "ResultPath": "$.stage",
                      "Next": "Convert to Audio"
                    },
                    "Convert to Audio": {
                      "Type": "Pass",
                      "Result": {
                        "service_name": "media_convert",
                        "function_name": "start_media_convert"
                      },
                      "ResultPath": "$.lambda",
                      "Next": "Start MediaConvert"
                    },
                    "Start MediaConvert": {
                      "Type": "Task",
                      "Resource": "${lambdaArn}",
                      "InputPath": "$",
                      "ResultPath": "$.mediaConvert",
                      "Next": "Did MediaConvert Start"
                    },
                    "Did MediaConvert Start": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.mediaConvert.jobDidStart",
                        "BooleanEquals": true,
                        "Next": "MediaConvert Wait"
                      }],
                      "Default": "Job Failed"
                    },
                    "MediaConvert Wait": {
                      "Type": "Wait",
                      "Seconds": 30,
                      "Next": "Get MediaConvert Status Params"
                    },
                    "Get MediaConvert Status Params": {
                      "Type": "Pass",
                      "Result": {
                        "service_name": "media_convert",
                        "function_name": "get_status"
                      },
                      "ResultPath": "$.lambda",
                      "Next": "Get MediaConvert Status"
                    },
                    "Get MediaConvert Status": {
                      "Type": "Task",
                      "Resource": "${lambdaArn}",
                      "InputPath": "$",
                      "ResultPath": "$",
                      "Next": "Did MediaConvert Complete"
                    },
                    "Did MediaConvert Complete": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Variable": "$.mediaConvert.status",
                          "StringEquals": "FAILED",
                          "Next": "Job Failed"
                        },
                        {
                          "Variable": "$.mediaConvert.status",
                          "StringEquals": "COMPLETE",
                          "Next": "Job Succeeded"
                        }
                      ],
                      "Default": "MediaConvert Wait"
                    },
                    "Job Failed": {
                      "Type": "Fail"
                    },
                    "Job Succeeded": {
                      "Type": "Succeed"
                    }
                  }
                }
              - {lambdaArn: !Ref MediaAnalysisPreprocessFunction}
          RoleArn: !GetAtt MediaAnalysisPreprocessStateMachineRole.Arn

  MediaAnalysisPreprocessStateMachineRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com"]]
                Action:
                  - "sts:AssumeRole"
          Path: /
          Policies:
            -
              PolicyName: media-analysis-preprocess-state-machine-policy
              PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    -
                      Effect: "Allow"
                      Action:
                        - "lambda:InvokeFunction"
                      Resource: !Ref MediaAnalysisPreprocessFunction

Outputs:
  MediaAnalysisPreprocessStateMachineArn:
    Description: PreprocessStateMachine
    Value: !Ref MediaAnalysisPreprocessStateMachine
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MediaAnalysisPreprocessStateMachineArn ] ]
  MediaAnalysisPreprocessStateMachineRoleArn:
    Description: Stage definition table
    Value: !Ref MediaAnalysisPreprocessStateMachineRole
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MediaAnalysisPreprocessStateMachineRoleArn ] ]