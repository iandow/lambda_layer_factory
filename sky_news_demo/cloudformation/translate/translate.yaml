AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SourceBucket:
    Type: "String"
    Description: "Bucket that contains the source code"
  startTranslateCode:
    Type: "String"
    Description: "S3 Key of the start translate code"
    Default: "startTranslate.zip"
  putS3TranslateCode:
    Type: "String"
    Description: "S3 Key of the putS3 translate code"
    Default: "putS3Translate.zip"
  dataStoreBucket:
    Type: "String"
    Description: "The bucket created by your CF datastore deployment (Arn format: 'arn:aws:s3:::${dataStore}/*') "

Resources:
# IAM Roles
  stepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Policies:
        - PolicyName: "skySFNLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
  translateRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "skyTranslateAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "translate:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Ref dataStoreBucket
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow
# Translate Lambdas

  skyTranslateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-translate.lambda_handler"
      Role: !GetAtt "translateRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "startTranslateCode"
      Runtime: "python3.7"

  skyPutS3TranslateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-translate-put-s3.lambda_handler"
      Role: !GetAtt "translateRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "putS3TranslateCode"
      Runtime: "python3.7"
# Stepfunction

  translateStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyTranslateStateMachine"
      DefinitionString: !Sub |-
        {
                  "StartAt": "Is Type?",
                  "States": {
                    "Is Type?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.translate.mediaType",
                        "StringEquals": "text",
                        "Next": "translate Enabled?"
                      }],
                      "Default": "translate Not Started"
                    },

                    "translate Enabled?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.translate.enabled",
                        "BooleanEquals": true,
                        "Next": "Start translate"
                      }],
                      "Default": "translate Not Started"
                    },

                    "translate Not Started": {
                      "Type": "Succeed"
                    },

                    "Start translate": {
                      "Type": "Task",
                      "Resource": "${skyTranslateFunction.Arn}",
                      "ResultPath": "$.output",
                      "Next": "Send translation to S3",
                      "Catch": [{
                        "ErrorEquals": [ "Error" ],
                        "Next": "translate Failed"
                      }]
                    },
                    "Send translation to S3": {
                      "Type": "Task",
                      "Resource": "${skyPutS3TranslateFunction.Arn}",
                      "End": true
                    },
                    "translate Failed": {
                      "Type": "Fail"
                    }
                  }
                }
      RoleArn: !GetAtt "stepFunctionRole.Arn"
