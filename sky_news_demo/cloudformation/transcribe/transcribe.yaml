AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SourceBucket:
    Type: "String"
    Description: "Bucket that contains the source code"
  startTranscribeCode:
    Type: "String"
    Description: "S3 Key of the start transcribe code"
    Default: "startTranscribe.zip"
  checkTranscribeCode:
    Type: "String"
    Default: "checkTranscribe.zip"
    Description: "S3 Key of the check transcribe code"
  resultTranscribeCode:
    Type: "String"
    Description: "S3 Key of the result transcribe code"
    Default: "resultTranscribe.zip"
  putS3TranscribeCode:
    Type: "String"
    Description: "S3 Key of the putS3 transcribe code"
    Default: "putS3Transcribe.zip"
  dataStoreBucket:
    Type: "String"
    Description: "The bucket created by your CF datastore deployment (Arn format: 'arn:aws:s3:::${dataStore}/*') "

Resources:
# IAM Roles:
  stepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Policies:
        - PolicyName: "skySFNLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"

  transcribeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "skyTranscribeAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "transcribe:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Ref dataStoreBucket
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow
  # Transcribe Lambdas

  skyStartTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-transcribe-start.handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "startTranscribeCode"
      Runtime: "nodejs8.10"

  skyCheckTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-transcribe-checkstatus.handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "checkTranscribeCode"
      Runtime: "nodejs8.10"

  skyResultTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-transcribe-result.handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "resultTranscribeCode"
      Runtime: "nodejs8.10"

  skyPutS3TranscribeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-transcribe-put-s3.lambda_handler"
      Role: !GetAtt "transcribeRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "putS3TranscribeCode"
      Runtime: "python3.7"

# Step function

  transcribeStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyTranscribeStateMachine"
      DefinitionString: !Sub |-
        {
                  "StartAt": "Is Type?",
                  "States": {
                    "Is Type?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.transcribe.mediaType",
                        "StringEquals": "audio",
                        "Next": "Transcribe Enabled?"
                      }],
                      "Default": "Transcribe Not Started"
                    },

                    "Transcribe Enabled?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.transcribe.enabled",
                        "BooleanEquals": true,
                        "Next": "Start Transcribe"
                      }],
                      "Default": "Transcribe Not Started"
                    },

                    "Transcribe Not Started": {
                      "Type": "Succeed"
                    },

                    "Start Transcribe": {
                      "Type": "Task",
                      "Resource": "${skyStartTranscribeFunction.Arn}",
                      "Next": "Transcribe Wait",
                      "Catch": [{
                        "ErrorEquals": [ "Error" ],
                        "Next": "Transcribe Failed"
                      }]
                    },
                    "Transcribe Wait": {
                      "Type": "Wait",
                      "Seconds": 30,
                      "Next": "Get Transcribe Status"
                    },
                    "Get Transcribe Status": {
                      "Type": "Task",
                      "Resource": "${skyCheckTranscribeFunction.Arn}",
                      "Next": "Transcribe Completed?",
                      "Catch": [{
                        "ErrorEquals": [ "Error" ],
                        "Next": "Transcribe Failed"
                      }]
                    },
                    "Transcribe Completed?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.status",
                        "StringEquals": "Complete",
                        "Next": "Transcribe Result"
                      }],
                      "Default": "Transcribe Wait"
                    },
                    "Transcribe Result": {
                      "Type": "Task",
                      "Resource": "${skyResultTranscribeFunction.Arn}",
                      "Next": "Send transcription to S3"
                    },
                    "Send transcription to S3": {
                      "Type": "Task",
                      "Resource": "${skyPutS3TranscribeFunction.Arn}",
                      "End": true
                    },
                    "Transcribe Failed": {
                      "Type": "Fail"
                    }
                  }
                }
      RoleArn: !GetAtt "stepFunctionRole.Arn"