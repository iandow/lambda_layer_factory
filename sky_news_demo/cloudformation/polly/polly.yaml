AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  SourceBucket:
    Type: "String"
    Description: "Bucket that contains the source code of the polly operator"
  startPollyCode:
    Type: "String"
    Description: "S3 Key of the start polly code"
    Default: "startPolly.zip"
  checkPollyCode:
    Type: "String"
    Description: "S3 Key of the check polly code"
    Default: "checkPolly.zip"
  dataStoreBucket:
    Type: "String"
    Description: "The bucket created by your CF datastore deployment (Arn format: 'arn:aws:s3:::${dataStore}/*') "


Resources:
# IAM Roles:
  pollyRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "skyPollyAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"
              - Action: "polly:*"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Ref dataStoreBucket
                Effect: "Allow"
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*:*'
                Effect: Allow

  stepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Policies:
        - PolicyName: "skySFNLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"


  # Polly Lambdas

  skyStartPollyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-start-polly.lambda_handler"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "startPollyCode"
      Runtime: "python3.7"

  skyCheckPollyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "mas-check-polly.lambda_handler"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !Ref "SourceBucket"
        S3Key: !Ref "checkPollyCode"
      Runtime: "python3.7"
# Step function
  pollyStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "skyPollyStateMachine"
      DefinitionString: !Sub |-
        {
                  "StartAt": "Is Type?",
                  "States": {
                    "Is Type?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.polly.mediaType",
                        "StringEquals": "text",
                        "Next": "polly Enabled?"
                      }],
                      "Default": "polly Not Started"
                    },

                    "polly Enabled?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.configuration.polly.enabled",
                        "BooleanEquals": true,
                        "Next": "Start polly"
                      }],
                      "Default": "polly Not Started"
                    },

                    "polly Not Started": {
                      "Type": "Succeed"
                    },

                    "Start polly": {
                      "Type": "Task",
                      "Resource": "${skyStartPollyFunction.Arn}",
                      "Next": "polly Wait",
                      "Catch": [{
                        "ErrorEquals": [ "Error" ],
                        "Next": "polly Failed"
                      }]
                    },
                    "polly Wait": {
                      "Type": "Wait",
                      "Seconds": 10,
                      "Next": "Get polly Status"
                    },
                    "Get polly Status": {
                      "Type": "Task",
                      "Resource": "${skyCheckPollyFunction.Arn}",
                      "Next": "polly Completed?",
                      "Catch": [{
                        "ErrorEquals": [ "Error" ],
                        "Next": "polly Failed"
                      }]
                    },
                    "polly Completed?": {
                      "Type": "Choice",
                      "Choices": [{
                        "Variable": "$.status",
                        "StringEquals": "Complete",
                        "Next": "polly Result"
                      }],
                      "Default": "polly Wait"
                    },
                    "polly Result": {
                      "Type": "Succeed"
                    },
                    "polly Failed": {
                      "Type": "Fail"
                    }
                  }
                }
      RoleArn: !GetAtt "stepFunctionRole.Arn"
